kind: golok-model
version: 1.0
# General info 
info:
  name: golok_apps
  title: Contoh1
  description: Ini contoh aplikasi

endpoint:
  url: http://localhost

# Applications
applications:
  frontend:
    appsName: my_golok_front
    # Option : flutter | react | vue
    framework: flutter
    packageName: tech.kays
    # Local Database: hive | sqlLite
    localDatabase: hive
    admin: true
    # Themes option, if not defined would be default.  
    # default | dark | light
    themes: default
    plugins:
    - connection
    stateManagement: riverpod
    # web | android | linux | ios | desktop | all
    # Value input as String or array.
    # e.g platform: web, android
    # or 
    # platfrom: 
    # - web
    # - android
    platform: web,android, linux, ios,desktop
    # Locale options: en | id
    locale: en, id
    entities: Product, Order, OrderLine
  server:
    appsName: myGolokServer
    packageName: com.golok.demo
    applicationType: microservice
    serviceDiscoveryType: eureka
    authenticationType: jwt
    databaseType: mongodb
    prodDatabaseType: mongodb
    devDatabaseType: mongodb
    cacheProvider: no
    enableHibernateCache: false
    buildTool: gradle
    serverPort: 8083
    skipUserManagement: true
    
    entities: 
# Services    
services:
- serviceName: namaservice

entities:
- name: product
  doc: Ini adalah Product
  entityInstance: instance
  properties:
  - name: id
    type: int
    show: false
  - name
  - name: description
    type: string
    truncateAt: 20
  - name: sku
    min: 3
    max: 50
  - name: image
    # ref: image
  - category
  - name: price
    # ref: price
  - name: unit
    enum: unit

- name: Order
  doc: Order product
  properties:
  - name: id
    type: int
    show: false
  - name: createdAt
    type: dateTime
  relationship:
  - type: oneToMany
    to: OrderLine
    name: items

- name: OrderLineProduct
  doc: Order product
  properties:
  - name: id
    type: int
    show: false
  - name: createdAt
    type: dateTime
  - name: product
    ref: 
      name: product
      label: product
  - name: orderItem
    ref: 
      name: product
      label: product 

- name: Shipment
  doc: Shipment
  properties:
  - name: id
    type: int
    show: false
  - name: createdAt
    type: dateTime

operations:
- name: getConsumer
  path: /golok/admin/consumers
  verb: get
  doc: Return the consumer list 
  example:
  - path: /golok/admin/consumers
    doc: This is doc
  parameters:
  - name: page	
    position: query	
    doc: page number	
    required: no	
    type: integer
  response:
  - code: 200
    type: product
    example: 
  - code: 201

enums:
- name: unit
  values: kg, g, cm
  
# applicationType monolith microservice gateway
# applicationType monolith microservice, gateway
# authenticationType jwt, session, oauth2 jwt
# baseName jhipster
# blueprints [] Array of blueprints to use, e.g., [blueprint1, blueprint2]
# buildTool maven maven, gradle
# cacheProvider ehcache or hazelcast caffeine, ehcache, hazelcast, infinispan, memcached, redis,
# clientFramework flutter, react, vue, svelte, no
# clientTheme none
# clientThemeVariant 
# databaseType sql, mongodb, cassandra,
# devDatabaseType h2Disk
# enableHibernateCache true
# enableTranslation true
# entitySuffix Suffix for entities. false for empty string.
# jhiPrefix jhi 
# languages [en, fr] Languages available in JHipster Braces are mandatory
# messageBroker no kafka, pulsar, no
# nativeLanguage en Any language supported by JHipster
# packageName com.mycompany.myapp
# prodDatabaseType mysql, mariadb, mssql, postgresql, oracle, no
# reactive false
# searchEngine no elasticsearch, couchbase, no
# serverPort 8080, 8081
# serviceDiscoveryType no consul, eureka, no
# skipClient false
# skipServer false
# skipUserManagement false
# testFrameworks [] cypress, protractor, cucumber, gatling
# websocket no