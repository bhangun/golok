import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../services/<%= nameField %>_routes.dart';
import '../services/<%= nameField %>_services.dart';
import '../models/<%= nameField %>.dart';


final <%= nameField %>Bloc = ChangeNotifierProvider<<%= nameClass %>Bloc>((ref) => <%= nameClass %>Bloc());

class <%= nameClass %>Bloc extends ChangeNotifier {
  
  bool isListEmpty = true;
  
  bool isItemEmpty = true;
  
  bool isUpdated = false;
  
  bool isDeleted = false;

  
  String errorMessage='error';
  
  bool showError = false;
  
  String title = '';

  
  int totalItem = 0;
  
  bool success = false;
  
  bool loading = false;

  int position = 0;

  <%= nameClass %>? itemDetail;
    

  // actions:-------------------------------------------------------------------

  String get formTitle => isUpdated? title='Update <%= nameClass %>':'Create <%= nameClass %>'; <% for (idx in properties) {  if(idx!='id') {%>
  
  void set<%= properties[idx].dartTypeCapital %>(<% if(properties[idx].dartType != 'enum' && properties[idx].isList)  {%>List<<%= properties[idx].dartType %>><%} else{%><%= properties[idx].dartType %><%}%> value) {
    <%- properties[idx].name %> = value;
  }<%} } %>

  
  itemTap(int _position) {
    try {
      position = _position;
      itemDetail = <%= nameField %>List![position];
      isItemEmpty = false;
      NavigationServices.navigateTo(<%= nameClass %>Routes.<%= nameField %>Detail);

    } catch (e) {
      isItemEmpty = true;
    }
  }

  
  add() {
    itemDetail = null;
    isUpdated = false;
    NavigationServices.navigateTo(<%= nameClass %>Routes.<%= nameField %>Form);
  }

  
  save() {
    loading = true;
    success = false;
    try {
      isUpdated ? <%= nameClass %>Services.update<%= nameClass %>(_to<%= nameClass %>())
          :<%= nameClass %>Services.create<%= nameClass %>(_to<%= nameClass %>());
      NavigationServices.navigateTo(<%= nameClass %>Routes.<%= nameField %>List);
      loading = false;
      success = true;
      get<%= nameClass %>List();
    }catch(e){
      print(e.toString());
    }
  }

  
  delete(int id) {
    loading = true;
    success = false;
    try {
      <%= nameClass %>Services.delete<%= nameClass %>(id);
      isDeleted =true;
      loading = false;
      success = true;
      get<%= nameClass %>List();
    }catch(e){
      print(e.toString());
    }
  }

  
  update() {
    loading = true;
    success = false;
    try {
      NavigationServices.navigateTo(<%= nameClass %>Routes.<%= nameField %>Form);
      isUpdated = true;
      loading = false;
      success = true;
      get<%= nameClass %>List();
    }catch(e){
      print(e.toString());
    }
  }

  Future get<%= nameClass %>List() async {
    loading = true;
    success = false;
    isListEmpty = true;
    try {
      <%= nameClass %>Services.<%= nameField %>s().then((data) => _set<%= nameClass %>List(data));
      isListEmpty = false;
      loading = false;
      success = true;
    } catch (e) {
      showError = true;
      errorMessage = 'Data Empty';
      print(e.toString());
    }

  }

  _set<%= nameClass %>List(List<<%= nameClass %>> data){
    if (data != null) {
      <%= nameField %>List = data;
      totalItem = data.length;
    }
  }

  <%= nameClass %> _to<%= nameClass %>() {
    return <%= nameClass %>(<% for (idx in properties) { if(idx=='id') {%>
    id: isUpdated ? itemDetail!.id : null,<%} else {%>
    <%= properties[idx].name %>: <%= properties[idx].name %>, <% }} %>);
  }

  
  viewList() {
    get<%= nameClass %>List();
    NavigationServices.navigateTo(<%= nameClass %>Routes.<%= nameField %>List);
  }
}
