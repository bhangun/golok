<%_

function capitalize(text){
    return text.substr( 0, 1 ).toUpperCase()+text.substr( 1 );
}

_%>
import 'dart:convert';
import 'package:equatable/equatable.dart'; <% for (idx in properties) { %><% if(properties[idx].dartType.origin == 'array' && properties[idx].dartType.type.endsWith('>')){%>
import '<%- properties[idx].dartType.type.slice(5, properties[idx].dartType.type.length -1 ).toLowerCase() %>.dart'; <% }}%>

class <%= name %> extends Equatable{
    <% for (idx in properties) { %>
    /// <%= properties[idx].desc %><% if (properties[idx]['desc'] == 'relationship') { %> <% if(properties[idx]['isList']) { %>
    final List<<%- properties[idx].dartType.type %>>? <%- properties[idx].name %>; 
    <% } else { %>
    final <%= properties[idx].dartType.type %>? <%= properties[idx].name %>; 
    <% } } else { %>
    final <%- properties[idx].dartType.type %>? <%- properties[idx].name %>; <% } } %>

    const <%= name %>(<%if(properties.length > 0){%>{ <% for (idx in properties) { if (properties[idx]['desc'] == 'relationship') { %>
        this.<%- properties[idx].name %>,<% } else {%> 
        this.<%- properties[idx].name %>,<% } } %> 
    }<%}%>);

    factory <%= name %>.fromJson(Map<String, dynamic> json) =>  
        <%= name %>(<% for (idx in properties) { if (properties[idx]['desc'] == 'relationship') { %>
 <% if(properties[idx]['isList']) { %>  
        <%= properties[idx].name %>: List<<%= properties[idx].dartType.type %>>.from(json['<%= properties[idx].name %>'].map((x) => 
        <%= properties[idx].dartType.type %>.fromJson(x))), <% } else { %>
        <%= properties[idx].name %>: <%= capitalize(properties[idx].dartType) %>.fromJson(json['<%= properties[idx].name %>']), 
        <% } } else { %><%- properties[idx].name %>: json['<%- properties[idx].name %>'], 
        <% } } %>
    );

    Map<String, dynamic> toJson() => 
        {<% for (idx in properties) { if (properties[idx]['desc'] == 'relationship') {%>
        <% if(properties[idx]['isList']) {%>"<%= properties[idx].name %>": List<dynamic>.from(<%= properties[idx].name %>.map((x) => x.toJson())), 
        <%} else { %>"<%= properties[idx].name %>": <%= properties[idx].name %>.toJson(),
        <%} } else {%>"<%- properties[idx].name %>": <%- properties[idx].name %>,
        <% }} %>
    };

    static List<<%= name %>> listFromString(String str) => List<<%= name %>>.from(json.decode(str).map((x) => <%= name %>.fromJson(x)));

    static List<<%= name %>> listFromJson(List<dynamic> data) {
        return data.map((post) => <%= name %>.fromJson(post)).toList();
    }

    static String list<%= name %>ToJson(List<<%= name %>> data) => json.encode(List<dynamic>.from(data.map((x) => x.toJson())));

    @override
    List<Object> get props => [<% for (idx in properties) { %>
        <%= properties[idx].name %>!, <% } %>
    ];
}

class <%= name %>List {
  final List<<%= name %>>? <%= name.toLowerCase() %>s;

  <%= name %>List({
    this.<%= name %>s,
  });

  factory <%= name %>List.fromJson(List<dynamic> json) {
    List<<%= name %>> <%= name.toLowerCase() %>s = [];
    <%= name.toLowerCase() %>s = json.map((post) => <%= name %>.fromJson(post)).toList();

    return <%= name %>List(
      <%= name %>s: <%= name.toLowerCase() %>s,
    );
  }
}

<%_ const enumsAlreadyDeclared = [];
properties.forEach(field => {
    if (field.fieldIsEnum && enumsAlreadyDeclared.indexOf(field.dartType) === -1) {
        enumsAlreadyDeclared.push(field.dartType); _%>
enum <%= field.name %> {<%
    const enums = field.fieldValues.split(',');
        for (let i = 0; i < enums.length; i++) { %>
    <%= enums[i] %><%if (i < enums.length - 1) { %>,<% }
        } %>
} <%_ } }); _%>

