import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import 'package:<%= model.info.name %>/models/general_status.dart';

import '../services/<%= snackCase %>_routes.dart';
import '../services/<%= snackCase %>_services.dart';
import '../model/<%= snackCase %>.dart';


// Provider for the <%= titleCase %> state
final <%= camelCase %>State = StateNotifierProvider<<%= titleCase %>Notifier, <%= titleCase %>State>((ref) {
  return <%= titleCase %>Notifier();
});

// Notifier to manage the <%= titleCase %> state
class <%= titleCase %>Notifier extends StateNotifier<<%= titleCase %>State> {
  
  // actions:-------------------------------------------------------------------
  String get formTitle => isUpdated? title='Update <%= titleCase %>':'Create <%= titleCase %>'; <% for (idx in properties) {  if(idx!='id') {%>
  
  void set<%= properties[idx].dartTypeCapital %>(<% if(properties[idx].dartType != 'enum' && properties[idx].isList)  {%>List<<%= properties[idx].dartType %>><%} else{%><%= properties[idx].dartType %><%}%> value) {
    <%- properties[idx].name %> = value;
  }<%} } %>

  itemTap(int _position) {
    try {
      position = _position;
      itemDetail = <%= camelCase %>List![position];
      isItemEmpty = false;
      NavigationServices.navigateTo(<%= titleCase %>Routes.<%= camelCase %>Detail);

    } catch (e) {
      isItemEmpty = true;
    }
  }

  add() {
    itemDetail = null;
    isUpdated = false;
    NavigationServices.navigateTo(<%= titleCase %>Routes.<%= camelCase %>Form);
  }
  
  save() {
    loading = true;
    success = false;
    try {
      isUpdated ? <%= titleCase %>Services.update<%= titleCase %>(_to<%= titleCase %>())
          :<%= titleCase %>Services.create<%= titleCase %>(_to<%= titleCase %>());
      NavigationServices.navigateTo(<%= titleCase %>Routes.<%= camelCase %>List);
      loading = false;
      success = true;
      get<%= titleCase %>List();
    }catch(e){
      print(e.toString());
    }
  }

  delete(int id) {
    loading = true;
    success = false;
    try {
      <%= titleCase %>Services.delete<%= titleCase %>(id);
      isDeleted =true;
      loading = false;
      success = true;
      get<%= titleCase %>List();
    }catch(e){
      print(e.toString());
    }
  }

  update() {
    loading = true;
    success = false;
    try {
      NavigationServices.navigateTo(<%= titleCase %>Routes.<%= camelCase %>Form);
      isUpdated = true;
      loading = false;
      success = true;
      get<%= titleCase %>List();
    }catch(e){
      print(e.toString());
    }
  }

  Future get<%= titleCase %>List() async {
    loading = true;
    success = false;
    isListEmpty = true;
    try {
      <%= titleCase %>Services.<%= camelCase %>s().then((data) => _set<%= titleCase %>List(data));
      isListEmpty = false;
      loading = false;
      success = true;
    } catch (e) {
      showError = true;
      errorMessage = 'Data Empty';
      print(e.toString());
    }
  }

  _set<%= titleCase %>List(List<<%= titleCase %>> data){
    if (data != null) {
      <%= camelCase %>List = data;
      totalItem = data.length;
    }
  }

  <%= titleCase %> _to<%= titleCase %>() {
    return <%= titleCase %>(<% for (idx in properties) { if(idx=='id') {%>
    id: isUpdated ? itemDetail!.id : null,<%} else {%>
    <%= properties[idx].name %>: <%= properties[idx].name %>, <% }} %>);
  }

  viewList() {
    get<%= titleCase %>List();
    NavigationServices.navigateTo(<%= titleCase %>Routes.<%= camelCase %>List);
  }
}

// State for the login screen
class <%= titleCase %>State {<% for (idx in properties) { %><% if(properties[idx].desc){%>
  /// <%= properties[idx].desc %> <%}%>
  final <% if(properties[idx].dartType ===''){ %><%= properties[idx].origin %><%}else{%><%=properties[idx].dartType %><%}%>? <%= properties[idx].name %>; <% } %>

  <%= titleCase %>State({<% for (idx in properties) { %>
  required this.<%= properties[idx].name %>, <% } %>
  });

  <%= titleCase %>State copyWith({<% for (idx in properties) { %>
  <% if(properties[idx].dartType ===''){ %><%= properties[idx].origin %><%}else{%><%=properties[idx].dartType %><%}%>? <%= properties[idx].name %>, <% } %>
  }) {
    return <%= titleCase %>State(<% for (idx in properties) { %>
      <%= properties[idx].name %>: <%= properties[idx].name %>?? this.<%= properties[idx].name %>, <% } %>
    );
  }

  @override
  String toString() {
    return '<% for (idx in properties) { %><%- properties[idx].name %>: $<%= properties[idx].name %>, <% } %>';
  }
}