import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:logging/logging.dart';

import 'package:<%= model.info.name %>/models/general_status.dart';
import 'package:<%= model.info.name %>/services/navigation.dart';

import '../<%= snackCase %>_routes.dart';
import '../services/<%= snackCase %>_services.dart';
import '../model/<%= snackCase %>.dart';

// Provider for the <%= titleCase %> state
final <%= camelCase %>State = StateNotifierProvider<<%= titleCase %>Notifier, <%= titleCase %>State>((ref) {
  return <%= titleCase %>Notifier();
});

// Notifier to manage the <%= titleCase %> state
class <%= titleCase %>Notifier extends StateNotifier<<%= titleCase %>State> {

  <%= titleCase %>Notifier() : super(<%= titleCase %>State(
    title: '',
    isUpdated: false,
    status: const StateStatus(),
    formStatus: const FormStatus(),
    <%= camelCase %>: const <%= titleCase %>()
  ));

  void set<%= titleCase %>(<%= titleCase %> <%= camelCase %>) {
    this.<%= camelCase %> = <%= camelCase %>;
  }

  itemTap(int _position) {
    try {
      position = _position;
      itemDetail = <%= camelCase %>List![position];
      isItemEmpty = false;
      NavigationServices.navigateTo(<%= titleCase %>Routes.<%= camelCase %>Detail);

    } catch (e) {
      isItemEmpty = true;
    }
  }

  add() {
    itemDetail = null;
    isUpdated = false;
    NavigationServices.navigateTo(<%= titleCase %>Routes.<%= camelCase %>Form);
  }
  
  void save(<%= titleCase %> <%= camelCase %>) {
    state.copyWith(
        <%= camelCase %>: <%= camelCase %>, status: const StateStatus(isLoading: true));
    try {
      <%= titleCase %>Services.create<%= titleCase %>(state.<%= camelCase %>);
      state.copyWith(
        <%= camelCase %>: <%= camelCase %>, status: const StateStatus(isLoading: false,isSuccess: true, isError: false));
    } catch (e) {
      state.copyWith(
          <%= camelCase %>: <%= camelCase %>,
          status: const StateStatus(
              isLoading: false, isError: true, errorMessage: ''));
      log.severe(state.status.errorMessage, e);
    }
  }

  delete(int id) {
    loading = true;
    success = false;
    try {
      <%= titleCase %>Services.delete<%= titleCase %>(id);
      isDeleted =true;
      loading = false;
      success = true;
      get<%= titleCase %>List();
    }catch(e){
      print(e.toString());
    }
  }

  update() {
    loading = true;
    success = false;
    try {
      NavigationServices.navigateTo(<%= titleCase %>Routes.<%= camelCase %>Form);
      isUpdated = true;
      loading = false;
      success = true;
      get<%= titleCase %>List();
    }catch(e){
      print(e.toString());
    }
  }

  Future get<%= titleCase %>List() async {
    loading = true;
    success = false;
    isListEmpty = true;
    try {
      <%= titleCase %>Services.<%= camelCase %>s().then((data) => _set<%= titleCase %>List(data));
      isListEmpty = false;
      loading = false;
      success = true;
    } catch (e) {
      showError = true;
      errorMessage = 'Data Empty';
      print(e.toString());
    }
  }

  _set<%= titleCase %>List(List<<%= titleCase %>> data){
    if (data != null) {
      <%= camelCase %>List = data;
      totalItem = data.length;
    }
  }

  <%= titleCase %> _to<%= titleCase %>() {
    return <%= titleCase %>(<% for (idx in properties) { if(idx=='id') {%>
    id: isUpdated ? itemDetail!.id : null,<%} else {%>
    <%= properties[idx].name %>: <%= properties[idx].name %>, <% }} %>);
  }

  viewList() {
    get<%= titleCase %>List();
    NavigationServices.navigateTo(<%= titleCase %>Routes.<%= camelCase %>List);
  }
}



// State for the <%= titleCase %> entity
class <%= titleCase %>State {
  final String title;
  final bool isUpdated;
  final StateStatus status;
  final FormStatus formStatus;
  final <%= titleCase %> <%= camelCase %>;

  <%= titleCase %>State({
    required this.title,
    required this.isUpdated,
    required this.status,
    required this.formStatus,
    required this.<%= camelCase %>
  });

  <%= titleCase %>State copyWith({
    String? title,
    bool? isUpdated,
    StateStatus? status,
    FormStatus? formStatus,
    <%= titleCase %>? <%= camelCase %>
  }) {
    return <%= titleCase %>State(
      title: title?? this.title,
      isUpdated: isUpdated?? this.isUpdated,
      status: status?? this.status,
      formStatus: formStatus?? this.formStatus,
      <%= camelCase %>: <%= camelCase %>?? this.<%= camelCase %>
    );
  }

  @override
  String toString() {
    return '';
  }
}