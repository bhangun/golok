import 'package:flutter/material.dart';

import 'package:<%= model.info.name %>/modules/<%= snackCase %>/store/<%= snackCase %>_store.dart';
import 'package:<%= model.info.name %>/widgets/progress_indicator_widget.dart';


class <%= titleCase %>List extends StatefulWidget {

  @override
  _<%= titleCase %>ListState createState() => _<%= titleCase %>ListState();
}

final String title = "<%= titleCase %> List";

class _<%= titleCase %>ListState extends State<<%= titleCase %>List> {
  final _listKey = GlobalKey<ScaffoldState>();
  var _<%= snackCase %>List;
  late <%= titleCase %>Store _<%= snackCase %>Store = <%= titleCase %>Store();

  @override
  void dispose() {

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    
    _<%= snackCase %>Store.get<%= titleCase %>List();

    int _total<%= titleCase %> = _<%= snackCase %>Store.totalItem;
    _<%= snackCase %>List = _<%= snackCase %>Store.<%= snackCase %>List;

    return Scaffold(
        key: _listKey,
        appBar: AppBar(title: Text('<%= titleCase %> List ( $_total<%= titleCase %> )')),
        body: _buildBody(context),
        floatingActionButton: FloatingActionButton(
          onPressed: _<%= snackCase %>Store.add,
          tooltip: 'Add',
          child: Icon(Icons.add),
        ));
  }

  _buildBody(BuildContext context) {
    return Stack(
      children: <Widget>[
        _<%= snackCase %>Store.loading
            ? CustomProgressIndicatorWidget()
            : Material(child: _buildSlidelist(context)),
      ],
    );
  }

  _buildSlidelist(BuildContext context) {
    return !_<%= snackCase %>Store.isListEmpty
        ? ListView.separated(
            itemCount: _<%= snackCase %>Store.totalItem,
            separatorBuilder: (context, index) {
              return Divider();
            },
            itemBuilder: (context, index) {
              return Slidable(
                key: ValueKey(index),
                actionPane: SlidableDrawerActionPane(),
                actions: <Widget>[
                  IconSlideAction(
                    caption: 'Share',
                    color: Colors.indigo,
                    icon: Icons.share,
                  ),
                ],
                secondaryActions: <Widget>[
                  IconSlideAction(
                    caption: 'Delete',
                    color: Colors.red,
                    icon: Icons.delete,
                    onTap: () =>
                        _<%= snackCase %>Store.delete(_<%= snackCase %>Store.<%= snackCase %>List![index].id!),
                  ),
                ],
                dismissal: SlidableDismissal(
                  child: SlidableDrawerDismissal(),
                ),
                child: ListTile(
                    leading: Icon(Icons.person),
                    title: Text(
                      '${_<%= snackCase %>List[index].id}',
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                      softWrap: false,
                      style: Theme.of(context).textTheme.title,
                    ),
                    /*subtitle: Text(
                      '${_<%= snackCase %>List[index]<%= (properties[1]!=null)?properties[1]:properties[0] %>} ', 
                      maxLines: 1,
                      overflow: TextOverflow.ellipsis,
                      softWrap: false,
                    ),*/
                    onTap: () => _<%= snackCase %>Store.itemTap(index)),
              );
            })
        : Center(child: Text('Data empty'));
  }
}