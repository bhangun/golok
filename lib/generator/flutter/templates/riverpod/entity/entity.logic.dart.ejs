import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:logging/logging.dart';

import 'package:<%= model.info.name %>/app/models/general_status.dart';
import '../<%= nameSnakeCase %>_module.dart';
import '../services/<%= nameSnakeCase %>_services.dart';
import '../model/<%= nameSnakeCase %>.dart';

var log = Logger('<%= nameTitleCase %>Notifier');

/// Provider for the <%= nameTitleCase %> state
final <%= nameCamelCase %>Provider = StateNotifierProvider<<%= nameTitleCase %>Notifier, <%= nameTitleCase %>State>((ref) {
  return <%= nameTitleCase %>Notifier();
});

/// Notifier to manage the <%= nameTitleCase %> state
class <%= nameTitleCase %>Notifier extends StateNotifier<<%= nameTitleCase %>State> {

  <%= nameTitleCase %>Notifier() : super(<%= nameTitleCase %>State(
    title: '',
    isUpdated: false,
    status: const StateStatus(),
    formStatus: const FormStatus(),
    isItemEmpty: true,
    totalItem: 0,
    isListEmpty: true,
    <%= nameCamelCase %>: const <%= nameTitleCase %>(),
    <%= nameCamelCase %>List: []
  ));

  void set<%= nameTitleCase %>(<%= nameTitleCase %> <%= nameCamelCase %>) {
     state.copyWith(<%= nameCamelCase %>: <%= nameCamelCase %>);
  }

  /// selected item
  itemTap(int index) {}

  /// Add entity
  add() {}

  /// Save entity
  void save(<%= nameTitleCase %> <%= nameCamelCase %>) {
    state.copyWith(
        <%= nameCamelCase %>: <%= nameCamelCase %>, status: const StateStatus(loading: true));
    try {
      <%= nameTitleCase %>Services.create<%= nameTitleCase %>(state.<%= nameCamelCase %>);
      state.copyWith(
        <%= nameCamelCase %>: <%= nameCamelCase %>, status: const StateStatus(loading: false,success: true, error: false));
    } catch (e) {
      state.copyWith(
          <%= nameCamelCase %>: <%= nameCamelCase %>,
          status: const StateStatus(
              loading: false, error: true, errorMessage: ''));
      log.severe(state.status.errorMessage, e);
    }
  }

  /// Delete entity by ID
  delete(int id) {
  }

  /// Update entity
  update() {
    
  }

  Future getInventoryList() async {}
}

// State for the <%= nameTitleCase %> entity
class <%= nameTitleCase %>State {
  final String title;
  final bool isUpdated;
  final StateStatus status;
  final FormStatus formStatus;
  final bool isItemEmpty;
  final bool isListEmpty;
  final int totalItem;
  final <%= nameTitleCase %> <%= nameCamelCase %>;
  final List<<%= nameTitleCase %>> <%= nameCamelCase %>List;

  <%= nameTitleCase %>State({
    required this.title,
    required this.isUpdated,
    required this.status,
    required this.formStatus,
    required this.isItemEmpty,
    required this.totalItem,
    required this.isListEmpty,
    required this.<%= nameCamelCase %>,
    required this.<%= nameCamelCase %>List
  });

  <%= nameTitleCase %>State copyWith({
    String? title,
    bool? isUpdated,
    StateStatus? status,
    FormStatus? formStatus,
    bool? isItemEmpty,
    int? totalItem,
    bool? isListEmpty,
    <%= nameTitleCase %>? <%= nameCamelCase %>,
    List<<%= nameTitleCase %>>? <%= nameCamelCase %>List
  }) {
    return <%= nameTitleCase %>State(
      title: title?? this.title,
      isUpdated: isUpdated?? this.isUpdated,
      status: status?? this.status,
      formStatus: formStatus?? this.formStatus,
      isItemEmpty: isItemEmpty?? this.isItemEmpty,
      totalItem: totalItem?? this.totalItem,
      isListEmpty: isListEmpty?? this.isListEmpty,
      <%= nameCamelCase %>: <%= nameCamelCase %>?? this.<%= nameCamelCase %>,
      <%= nameCamelCase %>List: <%= nameCamelCase %>List?? this.<%= nameCamelCase %>List
    );
  }

  @override
  String toString() {
    return '''
      title: $title,
      isUpdated: $isUpdated,
      status: $status,
      formStatus: $formStatus,
      isItemEmpty: $isItemEmpty,
      totalItem: $totalItem,
      isListEmpty: $isListEmpty,
      <%= nameCamelCase %>: $<%= nameCamelCase %>,
      <%= nameCamelCase %>List: $<%= nameCamelCase %>List
    ''';
  }
}