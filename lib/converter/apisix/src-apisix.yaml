pages:
  Service:
       doc: -| A Service is an abstraction of an API (which can also be understood as a set of Route abstractions). 
          It usually corresponds to an upstream service abstraction. 
          The relationship between Routes and a Service is usually N:1.
       requestAddress: /apisix/admin/services/{id}
       requestMethods:
       - method:  GET
         uri: /apisix/admin/services
         body: NULL
         description: Fetches a list of available Services.
       - method:  GET
         uri: /apisix/admin/services/{id}
         body: NULL
         description: Fetches specified Service by id.
       - method:  PUT
         uri: /apisix/admin/services/{id}
         body: {...}
         description: Creates a Service with the specified id.
       - method:  POST
         uri: /apisix/admin/services
         body: {...}
         description: Creates a Service and assigns a random id.
       - method:  DELETE
         uri: /apisix/admin/services/{id}
         body: NULL
         description: Removes the Service with the specified id.
       - method:  PATCH
         uri: /apisix/admin/services/{id}
         body: {...}
         description: Updates the selected attributes of the specified, existing Service. To delete an attribute, set value of attribute set to null.
       - method:  PATCH
         uri: /apisix/admin/services/{id}/{path}
         body: {...}
         description: Updates the attribute specified in the path. The values of other attributes remain unchanged.
       requestBodyParameter:
        - parameter: 	
          required: False	
          type: 	
          description: 	
          example:
        - parameter: plugins
          description: 
          example: 
          required: False
          type: Plugin	Plugins that are executed during the request/response cycle. See Plugin for more.	
        - parameter: upstream
          description: 
          example: 
          required: False
          type: Upstream	Configuration of the Upstream.	
        - parameter: upstream_id
          description: 
          example: 
          required: False
          type: Upstream	Id of the Upstream service.	
        - parameter: name
          description: 
          example: 
          required: False
          type: Auxiliary	Identifier for the Service.	service-xxxx
        - parameter: desc
          description: 
          example: 
          required: False
          type: Auxiliary	Description of usage scenarios.	service xxxx
        - parameter: labels
          description: 
          example: 
          required: False
          type: Match Rules	Attributes of the Service specified as key-value pairs.	{"version":"v2","build":"16","env":"production"}
        - parameter: enable_websocket
          description: 
          example: 
          required: False
          type: Auxiliary	Enables a websocket. Set to false by default.	
        - parameter: hosts
          description: 
          example: 
          required: False
          type: Match Rules	Matches with any one of the multiple hosts specified in the form of a non-empty list.	["foo.com", "*.bar.com"]
       responseParameter:
          doc: Currently, the response is returned from etcd.
  Consumer:
       doc: Consumers are users of services and can only be used in conjunction with a user authentication system. A Consumer is identified by a username property. 
          So, for creating a new Consumer, only the HTTP PUT method is supported.
       requestAddress: /apisix/admin/consumers/{username}
       requestMethods:
       - method:  GET
         uri: /apisix/admin/consumers
         body: NULL
         description: Fetches a list of all Consumers.
       - method:  GET
         uri: /apisix/admin/consumers/{username}
         body: NULL
         description: Fetches specified Consumer by username.
       - method:  PUT
         uri: /apisix/admin/consumers
         body: {...}
         description: Create new Consumer.
       - method:  DELETE
         uri: /apisix/admin/consumers/{username}
         body: NULL
         description: Removes the Consumer with the specified username.
       requestBodyParameterDoc: Parameter	Required	Type	Description	Example
       requestBodyParameter:
        - parameter: username
          description: 	
          example:
          required: True
          type: Name	Name of the Consumer.
        - parameter: group_id
          description: 	
          example:
          required: False
          type: Name	Group of the Consumer.	
        - parameter: plugins
          description: Plugins that are executed during the request/response cycle. See Plugin for more.	
          example:  
          required: False
          type: Plugin	
        - parameter: desc
          description: 	Description of usage scenarios.	
          example: customer xxxx
          required: False
          type: Auxiliary
        - parameter: labels
          description: Match Rules	Attributes of the Consumer specified as key-value pairs.	
          example: {"version":"v2","build":"16","env":"production"}
          required: False
          type: ''
  Upstream:
       doc: Upstream is a virtual host abstraction that performs load balancing on a given set of service nodes according to the configured rules. 
        An Upstream configuration can be directly bound to a Route or a Service, but the configuration in Route has a higher priority.
        This behavior is consistent with priority followed by the Plugin object.
       requestAddress: /apisix/admin/upstreams/{id}
       requestMethods:
       - method:  GET
         uri: /apisix/admin/upstreams
         body: NULL
         description: Fetch a list of all configured Upstreams.
       - method:  GET
         uri: /apisix/admin/upstreams/{id}
         body: NULL
         description: Fetches specified Upstream by id.
       - method:  PUT
         uri: /apisix/admin/upstreams/{id}
         body: {...}
         description: Creates an Upstream with the specified id.
       - method:  POST
         uri: /apisix/admin/upstreams
         body: {...}
         description: Creates an Upstream and assigns a random id.
       - method:  DELETE
         uri: /apisix/admin/upstreams/{id}
         body: NULL
         description: Removes the Upstream with the specified id.
       - method:  PATCH
         uri: /apisix/admin/upstreams/{id}
         body: {...}
         description: Updates the selected attributes of the specified, existing Upstream. To delete an attribute, set value of attribute set to null.
       - method:  PATCH
         uri: /apisix/admin/upstreams/{id}/{path}
         body: {...}
         description: Updates the attribute specified in the path. The values of other attributes remain unchanged.
       requestBodyParameters:
   #        doc: In addition to the equalization algorithm selections, Upstream also supports passive health check and retry for the upstream. See the table below for more details
        - parameter: type
          description: 
          example: 
          required: False
          type: Enumeration	Load balancing algorithm to be used, and the default value is roundrobin.	
        - parameter: nodes
          description: 
          example: 
          required: True
          type: can't be used with service_name	Node	IP addresses (with optional ports) of the Upstream nodes represented as a hash table or an array. In the hash table, the key is the IP address and the value is the weight of the node for the load balancing algorithm. For hash table case, if the key is IPv6 address with port, then the IPv6 address must be quoted with square brackets. In the array, each item is a hash table with keys host, weight, and the optional port and priority (defaults to 0). Nodes with lower priority are used only when all nodes with a higher priority are tried and are unavailable. Empty nodes are treated as placeholders and clients trying to access this Upstream will receive a 502 response.	192.168.1.100:80, [::1]:80
        - parameter: service_name
          description: 
          example: 
          required: True
          type: can't be used with nodes	String	Service name used for service discovery.	a-bootiful-client
        - parameter: discovery_type
          description: 
          example: 
          required: True
          type: if service_name is used	String	The type of service discovery.	eureka
        - parameter: hash_on
          description: 
          example: 
          required: False
          type: Auxiliary	Only valid if the type is chash. Supports Nginx variables (vars), custom headers (header), cookie and consumer. Defaults to vars.	
        - parameter: key
          description: 
          example: 
          required: False
          type: Match Rules	Only valid if the type is chash. Finds the corresponding node id according to hash_on and key values. When hash_on is set to vars, key is a required parameter and it supports Nginx variables. When hash_on is set as header, key is a required parameter, and header name can be customized. When hash_on is set to cookie, key is also a required parameter, and cookie name can be customized. When hash_on is set to consumer, key need not be set and the key used by the hash algorithm would be the authenticated consumer_name.	uri, server_name, server_addr, request_uri, remote_port, remote_addr, query_string, host, hostname, arg_***, arg_***
        - parameter: 
          description: 
          example: 
        - parameter: checks
          description: 
          example: 
          required: False
          type: Health Checker	Configures the parameters for the health check.	
        - parameter: retries
          description: 
          example: 
          required: False
          type: Integer	Sets the number of retries while passing the request to Upstream using the underlying Nginx mechanism. Set according to the number of available backend nodes by default. Setting this to 0 disables retry.	
        - parameter: retry_timeout
          description: 
          example: 
          required: False
          type: Integer	Timeout to continue with retries. Setting this to 0 disables the retry timeout.	
        - parameter: timeout
          description: 
          example: 
          required: False
          type: Timeout	Sets the timeout (in seconds) for connecting to, and sending and receiving messages to and from the Upstream.	{"connect": 0.5,"send": 0.5,"read": 0.5}
        - parameter: name
          description: 
          example: 
          required: False
          type: Auxiliary	Identifier for the Upstream.	
        - parameter: desc
          description: 
          example: 
          required: False
          type: Auxiliary	Description of usage scenarios.	
        - parameter: pass_host
          description: 
          example: 
          required: False
          type: Enumeration	Configures the host when the request is forwarded to the upstream. Can be one of pass, node or rewrite. Defaults to pass if not specified. pass- transparently passes the client's host to the Upstream. node- uses the host configured in the node of the Upstream. rewrite- Uses the value configured in upstream_host.	
        - parameter: upstream_host
          description: 
          example: 
          required: False
          type: Auxiliary	Specifies the host of the Upstream request. This is only valid if the pass_host is set to rewrite.	
        - parameter: scheme
          description: 
          example: 
          required: False
          type: Auxiliary	The scheme used when communicating with the Upstream. For an L7 proxy, this value can be one of http, https, grpc, grpcs. For an L4 proxy, this value could be one of tcp, udp, tls. Defaults to http.	
        - parameter: labels
          description: 
          example: 
          required: False
          type: Match Rules	Attributes of the Upstream specified as key-value pairs.	{"version":"v2","build":"16","env":"production"}
        - parameter: tls.client_cert
          description: 
          example: 
          required: False
          type: can't be used with tls.client_cert_id	HTTPS certificate	Sets the client certificate while connecting to a TLS Upstream.	
        - parameter: tls.client_key
          description: 
          example: 
          required: False
          type: can't be used with tls.client_cert_id	HTTPS certificate private key	Sets the client private key while connecting to a TLS Upstream.	
        - parameter: tls.client_cert_id
          description: 
          example: 
          required: False
          type: can't be used with tls.client_cert and tls.client_key	SSL	Set the referenced SSL id.	
        - parameter: keepalive_pool.size
          description: 
          example: 
          required: False
          type: Auxiliary	Sets keepalive directive dynamically.	
        - parameter: keepalive_pool.idle_timeout
          description: 
          example: 
          required: False
          type: Auxiliary	Sets keepalive_timeout directive dynamically.	
        - parameter: keepalive_pool.requests
          description: 
          example: 
          required: False
          type: Auxiliary	Sets keepalive_requests directive dynamically.	
An Upstream can be one of the following types:

roundrobin: Round robin balancing with weights.
chash: Consistent hash.
ewma: Pick the node with minimum latency. See EWMA Chart for more details.
least_conn: Picks the node with the lowest value of (active_conn + 1) / weight. Here, an active connection is a connection being used by the request and is similar to the concept in Nginx.
user-defined load balancer loaded via require("apisix.balancer.your_balancer").
The following should be considered when setting the hash_on value:

When set to vars, a key is required. The value of the key can be any of the Nginx variables without the $ prefix.
When set to header, a key is required. This is equal to "http_key".
When set to cookie, a key is required. This key is equal to "cookie_key". The cookie name is case-sensitive.
When set to consumer, the key is optional and the key is set to the consumer_name captured from the authentication Plugin.
When set to vars_combinations, the key is required. The value of the key can be a combination of any of the Nginx variables like $request_uri$remote_addr.
The features described below requires APISIX to be run on APISIX-Runtime:
You can set the scheme to tls, which means "TLS over TCP".
To use mTLS to communicate with Upstream, you can use the tls.client_cert/key in the same format as SSL's cert and key fields.
Or you can reference SSL object by tls.client_cert_id to set SSL cert and key. The SSL object can be referenced only if the type field is client, otherwise the request will be rejected by APISIX. In addition, only cert and key will be used in the SSL object.
To allow Upstream to have a separate connection pool, use keepalive_pool. It can be configured by modifying its child fields.

SSL:
        doc: SSL API:
        doc: SSL resource
       requestAddress: /apisix/admin/ssls/{id}

For notes on ID syntax please refer to: ID Syntax
       requestMethods:
       - method:  GET
         uri: /apisix/admin/ssls
         body: NULL
         description: Fetches a list of all configured SSL resources.
       - method:  GET
         uri: /apisix/admin/ssls/{id}
         body: NULL
         description: Fetch specified resource by id.
       - method:  PUT
         uri: /apisix/admin/ssls/{id}
         body: {...}
         description: Creates a resource with the specified id.
       - method:  POST
         uri: /apisix/admin/ssls
         body: {...}
         description: Creates a resource and assigns a random id.
       - method:  DELETE
         uri: /apisix/admin/ssls/{id}
         body: NULL
         description: Removes the resource with the specified id.
       requestBodyParameter:
        doc: Parameter	Required	Type	Description	Example
        - parameter: cert
          description: 
          example: 
          required: True
          type: Certificate	HTTPS certificate. This field supports saving the value in Secret Manager using the APISIX Secret resource.	
        - parameter: key
          description: 
          example: 
          required: True
          type: Private key	HTTPS private key. This field supports saving the value in Secret Manager using the APISIX Secret resource.	
        - parameter: certs
          description: 
          example: 
          required: False
          type: An array of certificates	Used for configuring multiple certificates for the same domain excluding the one provided in the cert field.	
        - parameter: keys
          description: 
          example: 
          required: False
          type: An array of private keys	Private keys to pair with the certs.	
        - parameter: client.ca
          description: 
          example: 
          required: False
          type: Certificate	Sets the CA certificate that verifies the client. Requires OpenResty 1.19+.	
        - parameter: client.depth
          description: 
          example: 
          required: False
          type: Certificate	Sets the verification depth in client certificate chains. Defaults to 1. Requires OpenResty 1.19+.	
        - parameter: client.skip_mtls_uri_regex
          description: 
          example: 
          required: False
          type: -| An array of regular expressions, in PCRE format	Used to match URI, if matched, this request bypasses the client certificate checking, i.e. skip the MTLS.	["/hello[0-9]+", "/foobar"]
        - parameter: snis
          description: 
          example: 
          required: True
          type: only if type is server	Match Rules	A non-empty array of HTTPS SNI	
        - parameter: labels
          description: 
          example: 
          required: False
          type: Match Rules	Attributes of the resource specified as key-value pairs.	{"version":"v2","build":"16","env":"production"}
        - parameter: type
          description: 
          example: 
          required: False
          type: Auxiliary	Identifies the type of certificate, default server.	client Indicates that the certificate is a client certificate, which is used when APISIX accesses the upstream; server Indicates that the certificate is a server-side certificate, which is used by APISIX when verifying client requests.
        - parameter: status
          description: 
          example: 
          required: False
          type: Auxiliary	Enables the current SSL. Set to 1 (enabled) by default.	1 to enable, 0 to disable
        - parameter: ssl_protocols
          description: 
          example: 
          required: False
          type: An array of ssl protocols	It is used to control the SSL/TLS protocol version used between servers and clients. See SSL Protocol for more examples.	["TLSv1.2", "TLSv2.3"]


Global Rule:
        doc: Sets Plugins which run globally. i.e these Plugins will be run before any Route/Service level Plugins.

Global Rule API:
        doc: Global Rule resource
       requestAddress: /apisix/admin/global_rules/{id}
       requestMethods:
       - method:  GET
         uri: /apisix/admin/global_rules
         body: NULL
         description: Fetches a list of all Global Rules.
       - method:  GET
         uri: /apisix/admin/global_rules/{id}
         body: NULL
         description: Fetches specified Global Rule by id.
       - method:  PUT
         uri: /apisix/admin/global_rules/{id}
         body: {...}
         description: Creates a Global Rule with the specified id.
       - method:  DELETE
         uri: /apisix/admin/global_rules/{id}
         body: NULL
         description: Removes the Global Rule with the specified id.
       - method:  PATCH
         uri: /apisix/admin/global_rules/{id}
         body: {...}
         description: Updates the selected attributes of the specified, existing Global Rule. To delete an attribute, set value of attribute set to null.
       - method:  PATCH
         uri: /apisix/admin/global_rules/{id}/{path}
         body: {...}
         description: Updates the attribute specified in the path. The values of other attributes remain unchanged.
       requestBodyParameter:
        doc: Parameter	Required	Description	Example
        - parameter: plugins
          description: 
          example: 
          required: True
          type: Plugins that are executed during the request/response cycle. See Plugin for more.	
Consumer group:
        doc: Group of Plugins which can be reused across Consumers.

Consumer group API:
        doc: Consumer group resource
       requestAddress: /apisix/admin/consumer_groups/{id}
       requestMethods:
       - method:  GET
         uri: /apisix/admin/consumer_groups
         body: NULL
         description: Fetches a list of all Consumer groups.
       - method:  GET
         uri: /apisix/admin/consumer_groups/{id}
         body: NULL
         description: Fetches specified Consumer group by id.
       - method:  PUT
         uri: /apisix/admin/consumer_groups/{id}
         body: {...}
         description: Creates a new Consumer group with the specified id.
       - method:  DELETE
         uri: /apisix/admin/consumer_groups/{id}
         body: NULL
         description: Removes the Consumer group with the specified id.
       - method:  PATCH
         uri: /apisix/admin/consumer_groups/{id}
         body: {...}
         description: Updates the selected attributes of the specified, existing Consumer group. To delete an attribute, set value of attribute set to null.
       - method:  PATCH
         uri: /apisix/admin/consumer_groups/{id}/{path}
         body: {...}
         description: Updates the attribute specified in the path. The values of other attributes remain unchanged.
       requestBodyParameter:
        doc: Parameter	Required	Description	Example
        - parameter: plugins
          description: Plugins that are executed during the request/response cycle.	
          example: See Plugin for more.
          required: True
          type: 
        - parameter: desc
          description: Description of usage scenarios.	
          example: customer xxxx
          required: False
          type: 
        - parameter: labels
          description: Attributes of the Consumer group specified as key-value pairs.
          example: {"version":"v2","build":"16","env":"production"}
          required: False
          type: 
Plugin config:
        doc: Group of Plugins which can be reused across Routes.

Plugin Config API:
        doc: Plugin Config resource
       requestAddress: /apisix/admin/plugin_configs/{id}
       requestMethods:
       - method:  GET
         uri: /apisix/admin/plugin_configs
         body: NULL
         description: Fetches a list of all Plugin configs.
       - method:  GET
         uri: /apisix/admin/plugin_configs/{id}
         body: NULL
         description: Fetches specified Plugin config by id.
       - method:  PUT
         uri: /apisix/admin/plugin_configs/{id}
         body: {...}
         description: Creates a new Plugin config with the specified id.
       - method:  DELETE
         uri: /apisix/admin/plugin_configs/{id}
         body: NULL
         description: Removes the Plugin config with the specified id.
       - method:  PATCH
         uri: /apisix/admin/plugin_configs/{id}
         body: {...}
         description: Updates the selected attributes of the specified, existing Plugin config. To delete an attribute, set value of attribute set to null.
       - method:  PATCH
         uri: /apisix/admin/plugin_configs/{id}/{path}
         body: {...}
         description: Updates the attribute specified in the path. The values of other attributes remain unchanged.
       requestBodyParameter:
        doc: Parameter	Required	Description	Example
        - parameter: plugins
          description: Plugins that are executed during the request/response cycle.	
          example: See Plugin for more.
          required: True
          type: 
        - parameter: desc
          description: Description of usage scenarios.	
          example: customer xxxx
          required: False
          type: 
        - parameter: labels
          description: Attributes of the Consumer group specified as key-value pairs.
          example: {"version":"v2","build":"16","env":"production"}
          required: False
          type: 
Plugin Metadata:
        doc: Plugin Metadata API:
        doc: Plugin Metadata resource
       requestAddress: /apisix/admin/plugin_metadata/{plugin_name}
       requestMethods:
       - method:  GET
         uri: /apisix/admin/plugin_metadata/{plugin_name}
         body: NULL
         description: Fetches the metadata of the specified Plugin by plugin_name.
       - method:  PUT
         uri: /apisix/admin/plugin_metadata/{plugin_name}
         body: {...}
         description: Creates metadata for the Plugin specified by the plugin_name.
       - method:  DELETE
         uri: /apisix/admin/plugin_metadata/{plugin_name}
         body: NULL
         description: Removes metadata for the Plugin specified by the plugin_name.
       requestBodyParameter:
        doc: A JSON object defined according to the metadata_schema of the Plugin ({plugin_name}).


Plugin:
        doc: Plugin API:
        doc: Plugin resource
       requestAddress: /apisix/admin/plugins/{plugin_name}
       requestMethods:
       - method:  GET
         uri: /apisix/admin/plugins/list
         body: NULL
         description: Fetches a list of all Plugins.
       - method:  GET
         uri: /apisix/admin/plugins/{plugin_name}
         body: NULL
         description: Fetches the specified Plugin by plugin_name.
       - method:  GET
         uri: /apisix/admin/plugins?all=true
         body: NULL
         description: Get all properties of all plugins.
       - method:  GET
         uri: /apisix/admin/plugins?all=true&subsystem=stream
         body: NULL
         description: Gets properties of all Stream plugins.
       - method:  GET
         uri: /apisix/admin/plugins?all=true&subsystem=http
         body: NULL
         description: Gets properties of all HTTP plugins.
       - method:  PUT
         uri: /apisix/admin/plugins/reload
         body: NULL
         description: Reloads the plugin according to the changes made in code
GET	apisix/admin/plugins/{plugin_name}?subsystem=stream
         body: NULL
         description: Gets properties of a specified plugin if it is supported in Stream/L4 subsystem.
GET	apisix/admin/plugins/{plugin_name}?subsystem=http
         body: NULL
         description: Gets properties of a specified plugin if it is supported in HTTP/L7 subsystem.
CAUTION

The interface of getting properties of all plugins via /apisix/admin/plugins?all=true will be deprecated soon.
       requestBodyParameter:
        doc: The Plugin ({plugin_name}) of the data structure.

Request Arguments:
        doc: Name	Description	Default
subsystem	The subsystem of the Plugins.	http
The plugin can be filtered on subsystem so that the ({plugin_name}) is searched in the subsystem passed through query params.

Stream Route:
        doc: Route used in the Stream Proxy.

Stream Route API:
        doc: Stream Route resource
       requestAddress: /apisix/admin/stream_routes/{id}
       requestMethods:
       - method:  GET
         uri: /apisix/admin/stream_routes
         body: NULL
         description: Fetches a list of all configured Stream Routes.
       - method:  GET
         uri: /apisix/admin/stream_routes/{id}
         body: NULL
         description: Fetches specified Stream Route by id.
       - method:  PUT
         uri: /apisix/admin/stream_routes/{id}
         body: {...}
         description: Creates a Stream Route with the specified id.
       - method:  POST
         uri: /apisix/admin/stream_routes
         body: {...}
         description: Creates a Stream Route and assigns a random id.
       - method:  DELETE
         uri: /apisix/admin/stream_routes/{id}
         body: NULL
         description: Removes the Stream Route with the specified id.
       requestBodyParameter:
        doc: Parameter	Required	Type	Description	Example
        - parameter: upstream
          description: 
          example: 
          required: False
          type: Upstream	Configuration of the Upstream.	
        - parameter: upstream_id
          description: 
          example: 
          required: False
          type: Upstream	Id of the Upstream service.	
        - parameter: service_id
          description: 
          example: 
          required: False
          type: String	Id of the Service service.	
        - parameter: remote_addr
          description: 
          example: 
          required: False
          type: IPv4, IPv4 CIDR, IPv6	Filters Upstream forwards by matching with client IP.	"127.0.0.1" or "127.0.0.1/32" or "::1"
        - parameter: server_addr
          description: 
          example: 
          required: False
          type: IPv4, IPv4 CIDR, IPv6	Filters Upstream forwards by matching with APISIX Server IP.	"127.0.0.1" or "127.0.0.1/32" or "::1"
        - parameter: server_port
          description: 
          example: 
          required: False
          type: Integer	Filters Upstream forwards by matching with APISIX Server port.	9090
        - parameter: sni
          description: 
          example: 
          required: False
          type: Host	Server Name Indication.	"test.com"
        - parameter: protocol.name
          description: 
          example: 
          required: False
          type: String	Name of the protocol proxyed by xRPC framework.	"redis"
        - parameter: protocol.conf
          description: 
          example: 
          required: False
          type: Configuration	Protocol-specific configuration.	
To learn more about filtering in stream proxies, check this document.

Secret:
        doc: Secret means Secrets Management, which could use any secret manager supported, e.g. vault.

Secret API:
        doc: Secret resource
       requestAddress: /apisix/admin/secrets/{secretmanager}/{id}
       requestMethods:
       - method:  GET
         uri: /apisix/admin/secrets
         body: NULL
         description: Fetches a list of all secrets.
       - method:  GET
         uri: /apisix/admin/secrets/{manager}/{id}
         body: NULL
         description: Fetches specified secrets by id.
       - method:  PUT
         uri: /apisix/admin/secrets/{manager}
         body: {...}
         description: Create new secrets configuration.
       - method:  DELETE
         uri: /apisix/admin/secrets/{manager}/{id}
         body: NULL
         description: Removes the secrets with the specified id.
       - method:  PATCH
         uri: /apisix/admin/secrets/{manager}/{id}
         body: {...}
         description: Updates the selected attributes of the specified, existing secrets. To delete an attribute, set value of attribute set to null.
       - method:  PATCH
         uri: /apisix/admin/secrets/{manager}/{id}/{path}
         body: {...}
         description: Updates the attribute specified in the path. The values of other attributes remain unchanged.
       requestBodyParameter:
        doc: When {secretmanager} is vault:
        - parameter: uri
          description: 
          example: 
          required: True
          type: URI	URI of the vault server.	
        - parameter: prefix
          description: 
          example: 
          required: True
          type: string	key prefix	
        - parameter: token
          description: 
          example: 
          required: True
          type: string	vault token.	
     - responseParameter:
        doc: Currently, the response is returned from etcd.

Proto:
        doc: Proto is used to store protocol buffers so that APISIX can communicate in gRPC.

See grpc-transcode plugin doc for more examples.

# Method	Request URI	Request Body	Description
Proto API:
        doc: Proto resource
       requestAddress: /apisix/admin/protos/{id}
       requestMethods:
       - method:  GET
         uri: /apisix/admin/protos
         body: NULL
         description: List all Protos.
       - method:  GET
         uri: /apisix/admin/protos/{id}
         body: NULL
         description: Get a Proto by id.
       - method:  PUT
         uri: /apisix/admin/protos/{id}
         body: {...}
         description: Create or update a Proto with the given id.
       - method:  POST
         uri: /apisix/admin/protos
         body: {...}
         description: Create a Proto with a random id.
       - method:  DELETE
         uri: /apisix/admin/protos/{id}
         body: NULL
         description: Delete Proto by id.
       requestBodyParameter:
        doc: Parameter	Required	Type	Description	Example
        - parameter: content
          description: 
          example: 
          required: True
          type: String	content of .proto or .pb files	See here
Schema validation:
        doc: Check the validity of a configuration against its entity schema. This allows you to test your input before submitting a request to the entity endpoints of the Admin API.

Note that this only performs the schema validation checks, checking that the input configuration is well-formed. Requests to the entity endpoint using the given configuration may still fail due to other reasons, such as invalid foreign key relationships or uniqueness check failures against the contents of the data store.

Schema validation:
        doc: Schema validation
       requestAddress: /apisix/admin/schema/validate/{resource}
       requestMethods:

       - method:  POST
         uri: /apisix/admin/schema/validate/{resource}	{..resource conf..}	Validate the resource configuration against corresponding schema.
       requestBodyParameter:
        doc: 200: validate ok.
        - parameter: 
          description: 
          example: 
400: validate failed, with error as response body in JSON format.
