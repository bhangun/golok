<%
let _relation = [];
let _relationship = [];
for (e in entities){
  for (i in entities[e].relationship){

    _relation.push(entities[e].relationship[i].to);

    _relationship.push({
      from: entities[e].nameTitleCase,
      to: entities[e].relationship[i].to,
      type: entities[e].relationship[i].type,
      name: entities[e].relationship[i].name
    });
  }
}

function groupBy(key) {
    return _relationship.reduce((acc, currentValue) => {
      let groupKey = currentValue[key];
      if (!acc[groupKey]) {
        acc[groupKey] = [];
      }
      acc[groupKey].push(currentValue);
      return acc;
    }, {});
  };

  const groupRelation = groupBy('type');
%>


application {
  config {
    baseName info.name
  }
  entities * 
  service * with serviceClass
}

<% for (idx in entities) { %>
/**
 * <%= entities[idx].doc %><% if(entities[idx].author){ %>
 * @author <%= entities[idx].author %><%}%>
 */  
entity <%= entities[idx].nameTitleCase %> {<% for (px in entities[idx].properties) { 
  if(!_relation.includes(entities[idx].properties[px].type.java.name)){%> 
  <% if(entities[idx].properties[px].doc){%>/** 
  * <%= entities[idx].properties[px].doc %> 
  */<%}%>
  <%= entities[idx].properties[px].name %>  <%= entities[idx].properties[px].type.java.name %> <%}%>
  <%}%>
}<% } %>
<% for (idx in enums) { %>
enum <%= enums[idx].name %> {<% for (v in enums[idx].values) { %>
  <%= enums[idx].values[v].toUpperCase() %><%if(v < enums[idx].values.length-1){%>, <%}%><%}%>
}<%}%>

<% if(groupRelation.ManyToOne){ %>
relationship ManyToOne{<% for (r in groupRelation.ManyToOne) { %>
  <%= groupRelation.ManyToOne[r].from %>{<%= groupRelation.ManyToOne[r].name %>} to <%=groupRelation.ManyToOne[r].to %>
<%}%>}
<%}%><% if(groupRelation.OneToMany){ %>
relationship OneToMany{<% for (r in groupRelation.OneToMany) { %>
  <%= groupRelation.OneToMany[r].from %>{<%= groupRelation.OneToMany[r].name %>} to <%=groupRelation.OneToMany[r].to %>
<%}%>}
<%}%><% if(groupRelation.ManyToMany){ %>
relationship ManyToMany{<% for (r in groupRelation.ManyToMany) { %>
  <%= groupRelation.ManyToMany[r].from %>{<%= groupRelation.ManyToMany[r].name %>} to <%=groupRelation.ManyToMany[r].to %>
<%}%>}
<%}%><% if(groupRelation.OneToOne){ %>
relationship OneToOne{<% for (r in groupRelation.OneToOne) { %>
  <%= groupRelation.OneToOne[r].from %>{<%= groupRelation.OneToOne[r].name %>} to <%=groupRelation.OneToOne[r].to %>
<%}%>}
<%}%>

dto * with mapstruct

paginate * with infinite-scroll
paginate * with pagination
paginate * with pager  // pager is only available in AngularJS

service * with serviceClass
service * with serviceImpl